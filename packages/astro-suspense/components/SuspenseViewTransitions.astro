---
import { ViewTransitions } from "astro:transitions";

export type Props = Parameters<typeof ViewTransitions>[0];
---

<ViewTransitions {...Astro.props} />

<script>
  import { TransitionBeforePreparationEvent } from "astro:transitions/client";
  import {
    fetchHTML,
    runScripts,
    preloadStyleLinks,
    prepareForClientOnlyComponents,
  } from "../src/astro-modifications.js";

  let streamReader: ReadableStreamDefaultReader<string>;
  let suspenseStream: AsyncGenerator<string> | null = null;
  let parser: DOMParser;

  async function* readSuspenseStream(): AsyncGenerator<string> {
    let buffer = "";

    while (true) {
      const { value, done } = await streamReader.read();

      if (value) {
        buffer += value;

        const lines = buffer.split("\n");

        if (lines.length > 1) {
          for (let i = 0; i < lines.length - 1; i++) {
            yield JSON.parse(lines[i]);
          }

          buffer = lines.slice(-1)[0];
        }
      }

      if (done) break;
    }

    if (buffer) yield JSON.parse(buffer);
  }

  document.addEventListener("astro:before-preparation", (_event) => {
    const event = _event as TransitionBeforePreparationEvent;

    event.loader = async () => {
      const href = event.to.href;
      const init: RequestInit = {
        headers: {
          "astro-suspense-transition": "1",
        },
      };

      if (event.formData) {
        init.method = "POST";
        init.body = event.formData;
      }

      if (streamReader) {
        streamReader.cancel();
        suspenseStream = null;
      }

      const response = await fetchHTML(href, init);

      if (response.mediaType == "text/astro-suspense-transition-stream") {
        streamReader = response.streamReader;
        suspenseStream = readSuspenseStream();
      }

      // If there is a problem fetching the new page, just do an MPA navigation to it.
      if (response === null) {
        event.preventDefault();
        return;
      }
      // if there was a redirection, show the final URL in the browser's address bar
      if (response.redirected) {
        event.to = new URL(response.redirected);
      }

      parser ??= new DOMParser();

      let mainHtml: string;

      if (response.mediaType === "text/astro-suspense-transition-stream") {
        mainHtml = await suspenseStream.next().then((r) => r.value ?? "");
      } else {
        mainHtml = response.html;
      }

      event.newDocument = parser.parseFromString(
        mainHtml,
        response.mediaType === "text/astro-suspense-transition-stream"
          ? "text/html"
          : response.mediaType,
      );
      // The next line might look like a hack,
      // but it is actually necessary as noscript elements
      // and their contents are returned as markup by the parser,
      // see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString
      event.newDocument
        .querySelectorAll("noscript")
        .forEach((el) => el.remove());

      // If ViewTransitions is not enabled on the incoming page, do a full page load to it.
      // Unless this was a form submission, in which case we do not want to trigger another mutation.
      if (
        !event.newDocument.querySelector(
          '[name="astro-view-transitions-enabled"]',
        ) &&
        !event.formData
      ) {
        event.preventDefault();
        return;
      }

      const links = preloadStyleLinks(event.newDocument);
      links.length && (await Promise.all(links));

      if (import.meta.env.DEV)
        await prepareForClientOnlyComponents(event.newDocument, event.to);
    };
  });

  document.addEventListener("astro:page-load", async () => {
    if (suspenseStream) {
      const node = document.createElement("template");

      for await (const chunk of suspenseStream) {
        node.innerHTML = chunk;
        document.body.appendChild(node.content);
        // HACK: Run twice in case suspense chunks added new scripts
        await runScripts();
        await runScripts();
      }
    }
  });
</script>
