---
// This is a modified version of https://github.com/withastro/astro/blob/e63aac94ca8aca96a39785a2f5926827ed18c255/packages/astro/components/ViewTransitions.astro

// MIT License
//
// Copyright (c) 2021 Fred K. Schott
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//
// """
// This license applies to parts of the `packages/create-astro` and `packages/astro` subdirectories originating from the https://github.com/sveltejs/kit repository:
//
// Copyright (c) 2020 [these people](https://github.com/sveltejs/kit/graphs/contributors)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// """
//
//
// """
// This license applies to parts of the `packages/create-astro` and `packages/astro` subdirectories originating from the https://github.com/vitejs/vite repository:
//
// MIT License
//
// Copyright (c) 2019-present, Yuxi (Evan) You and Vite contributors
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// """

type Fallback = "none" | "animate" | "swap";

export interface Props {
  fallback?: Fallback;
  handleForms?: boolean;
}

const { fallback = "animate", handleForms } = Astro.props;
---

<style is:global>
  /* Route announcer */
  .astro-route-announcer {
    position: absolute;
    left: 0;
    top: 0;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    overflow: hidden;
    white-space: nowrap;
    width: 1px;
    height: 1px;
  }
</style>
<meta name="astro-view-transitions-enabled" content="true" />
<meta name="astro-view-transitions-fallback" content={fallback} />
{handleForms ? <meta name="astro-view-transitions-forms" content="true" /> : ""}
<script>
  import type { Options } from "astro:transitions/client";
  import { supportsViewTransitions, navigate } from "../dist/router";
  // NOTE: import from `astro/prefetch` as `astro:prefetch` requires the `prefetch` config to be enabled
  import { init } from "../dist/prefetch";

  export type Fallback = "none" | "animate" | "swap";

  function getFallback(): Fallback {
    const el = document.querySelector(
      '[name="astro-view-transitions-fallback"]',
    );
    if (el) {
      return el.getAttribute("content") as Fallback;
    }
    return "animate";
  }

  function isReloadEl(el: HTMLElement): boolean {
    return el.dataset.astroReload !== undefined;
  }

  if (supportsViewTransitions || getFallback() !== "none") {
    document.addEventListener("click", (ev) => {
      let link = ev.target;
      if (link instanceof Element && link.tagName !== "A") {
        link = link.closest("a");
      }
      // This check verifies that the click is happening on an anchor
      // that is going to another page within the same origin. Basically it determines
      // same-origin navigation, but omits special key combos for new tabs, etc.
      if (
        !link ||
        !(link instanceof HTMLAnchorElement) ||
        isReloadEl(link) ||
        link.hasAttribute("download") ||
        !link.href ||
        (link.target && link.target !== "_self") ||
        link.origin !== location.origin ||
        ev.button !== 0 || // left clicks only
        ev.metaKey || // new tab (mac)
        ev.ctrlKey || // new tab (windows)
        ev.altKey || // download
        ev.shiftKey || // new window
        ev.defaultPrevented
      ) {
        // No page transitions in these cases,
        // Let the browser standard action handle this
        return;
      }
      ev.preventDefault();
      navigate(link.href, {
        history: link.dataset.astroHistory === "replace" ? "replace" : "auto",
      });
    });

    if (document.querySelector('[name="astro-view-transitions-forms"]')) {
      document.addEventListener("submit", (ev) => {
        let el = ev.target as HTMLElement;
        if (el.tagName !== "FORM" || isReloadEl(el)) {
          return;
        }

        const form = el as HTMLFormElement;
        const submitter = ev.submitter;
        const formData = new FormData(form);
        // Use the form action, if defined, otherwise fallback to current path.
        let action =
          submitter?.getAttribute("formaction") ??
          form.action ??
          location.pathname;
        const method = submitter?.getAttribute("formmethod") ?? form.method;

        const options: Options = {};
        if (method === "get") {
          const params = new URLSearchParams(formData as any);
          const url = new URL(action);
          url.search = params.toString();
          action = url.toString();
        } else {
          options.formData = formData;
        }
        ev.preventDefault();
        navigate(action, options);
      });
    }

    // @ts-expect-error injected by vite-plugin-transitions for treeshaking
    if (!__PREFETCH_DISABLED__) {
      init({ prefetchAll: true });
    }
  }
</script>
